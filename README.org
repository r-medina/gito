#+TITLE: gito
#+PROPERTY: header-args :eval no

Tool for managing source code more like =go get= (ie with opinions on
where code should live) - find code and stay organized easier!

* Download code

  #+begin_src text :noeval
    gito get github.com/r-medina/gito # defults to GOPATH[0]/src/github.com/... or $HOME/src/...
  #+end_src

  the =get= command needs a full(ish) name/url - from then on you can
  refer to repos by a subset of their names (eg "r-medina/gito" or
  "gito").


* Find out where repo is

  #+begin_src shell
    gito where r-medina/gito # $HOME/go/src/github.com/r-medina/gito
  #+end_src


  Can also find code with just repo name
  #+begin_src shell
    gito where gito # $HOME/go/src/github.com/r-medina/gito
  #+end_src

  Which you can easily cd into
  #+begin_src shell
    cd $(gito where gito)
  #+end_src


* Find repo online

  #+begin_src shell
    gito url gito         # https://github.com/r-medina/gito
    open $(gito url gito) # opens in brownser
  #+end_src


* Tell gito where a repo lives

  #+begin_src shell
    gito set r-medina/gito <path> # saves the location information to path
    gito get r-medina/gito        # <path>
  #+end_src

  when a repo's location is set, only that name can be used, but you
  can set =r-medina/gito= and =gito= to =<path>= so that both work!


* Make alias for repo

  #+begin_src shell
    gito alias g github.com/mvdan/garble
    gito where g # $HOME/go/src/github.com/mvdan/garble
  #+end_src

  #+begin_src shell
    gito alias d dotfiles
    gito set dotfiles ~/.dotfiles # $HOME
    cd $(gito where d)
  #+end_src


* Use different workspaces

  see config for how to set these up, but

  #+begin_src shell
    gito -w=work where gh # $HOME/where-i-keep-work-code/src/github.com/github
  #+end_src


* Usage

  #+begin_src text
    usage: gito [<flags>] <command> [<args> ...]

    Manage code intelligently.

    See http://github.com/r-medina/gito for documentation.

    Flags:
      --workspace=WORKSPACE which workspace to use (defaults to first in config)
	-w

    Commands:
      help
	show this message

      get <repo>
	download a repo

      where <repo>
	find out where repo lives

      url [<repo>|.]
	get the url of the repo (for web browsing) - can also pass no argument or "." for current directory

      alias <alias> <to>
	alias a name to something - eg "k8s" -> "github.com/kubernetes/kubernetes"

      set <alias> <location>
	for code living outside your configured path, tell gito where to find it
  #+end_src


* Example Config

  gito cannot do shell expansion for now, so add full paths to the
  config file.

  #+begin_src yaml
    workspaces:
        - name: personal
          path: "/Users/ricky"
          aliases:
              g: gito
              d: dotfiles
          custom:
              dotfiles: "/Users/ricky/.dotfiles"
        - name: work
          path: "/Users/ricky/gh"
          aliases:
              ghe: super-secret
          custom:
              super-secret: "somewhereElse/theMoneyMaker
  #+end_src


* Installation

  #+begin_src shell
    go install -u github.com/r-medina/gito
  #+end_src

* Useful aliases

  Add the following to your shell:
  #+begin_src shell
    whence gito > /dev/null || return

    gicd() {
	cd $(gito where $1)
    }

    gpen() {
	open $(gito url $1)
    }
  #+end_src

  This makes going into your source code directories really easy =gcd
  gito= as well as opening the repository in a web browser.


* Caveats

  - only works with git
  - only tested with github

